---
title: "Untitled"
author: "Meghan Forrest"
date: "2023-04-11"
output:
  pdf_document: default
editor_options:
  markdown:
    wrap: 72
---

```{r setup, include=FALSE}
library(readr)
library(tidyverse)
library(stringr)
library(ggplot2)
library(readxl)
library(table1)
library(qwraps2)
library(ggthemes)
library(ggpubr)
library(gridExtra)
library(datasets)
library(forcats)
library(patchwork)
library(grid)
library(table1)

Abstraction_master <- read.csv(file = url("https://raw.githubusercontent.com/meghanrforrest/SPBG-meta-research-study/main/Abstraction_master.csv"))
```


# Import dataset and restructure.

```{r}

# filter for only included studies

dat_incl <- Abstraction_master |> 
  filter(eligiblity == "Yes") |> 
  
  
# create variable for spbg count per study  
  mutate(
    spbg_count = case_when(
      spbg_present == "No" ~ 0, 
      spbg_present == "Yes" & additional_spbg_1 == "No" ~ 1, 
      spbg_present == "Yes" & additional_spbg_1 == "Yes" & additional_spbg_2 == "No" ~ 2, 
      spbg_present == "Yes" & additional_spbg_1 == "Yes" & additional_spbg_2 == "Yes"  & additional_spbg_3 == "No" ~ 3, 
      spbg_present == "Yes" & additional_spbg_1 == "Yes" & additional_spbg_2 == "Yes" & additional_spbg_3 == "Yes" & additional_spbg_4 == "No" ~ 4, 
      spbg_present == "Yes" & additional_spbg_1 == "Yes" & additional_spbg_2 == "Yes" & additional_spbg_3 == "Yes" & additional_spbg_4 == "Yes" ~ 5)) |>
  
# recode "unadjusted" to exclude those graphs that are stratified
  mutate(
    unadjusted_1 = case_when(
      unadjusted_1 == "Yes" & stratified_1 == "No" & adjusted_1 == "No" ~ "Yes", 
      unadjusted_1 == "Yes" & stratified_1 == "No" & adjusted_1 == "Yes" ~ "invalid",
      unadjusted_1 == "Yes" & stratified_1 == "Yes" & adjusted_1 == "Yes" ~ "invalid",
      unadjusted_1 == "Yes" & stratified_1 == "Yes" & adjusted_1 == "No" ~ "No",
      unadjusted_1 == "No" & stratified_1 == "No" & adjusted_1 == "No" ~ "invalid", 
      unadjusted_1 == "No" & stratified_1 == "Yes" & adjusted_1 == "No" ~ "No", 
      unadjusted_1 == "No" & stratified_1 == "Yes" & adjusted_1 == "Yes" ~ "No",
      unadjusted_1 == "No" & stratified_1 == "No" & adjusted_1 == "Yes" ~ "No", 
      unadjusted_1 == "Yes" & stratified_1 == "Yes" & adjusted_1 == "Yes" ~ "invalid"), 
    unadjusted_2 = case_when(
      unadjusted_2 == "Yes" & stratified_2 == "No" & adjusted_2 == "No" ~ "Yes", 
      unadjusted_2 == "Yes" & stratified_2 == "No" & adjusted_2 == "Yes" ~ "invalid",
      unadjusted_2 == "Yes" & stratified_2 == "Yes" & adjusted_2 == "Yes" ~ "invalid",
      unadjusted_2 == "Yes" & stratified_2 == "Yes" & adjusted_2 == "No" ~ "No",
      unadjusted_2 == "No" & stratified_2 == "No" & adjusted_2 == "No" ~ "invalid", 
      unadjusted_2 == "No" & stratified_2 == "Yes" & adjusted_2 == "No" ~ "No", 
      unadjusted_2 == "No" & stratified_2 == "Yes" & adjusted_2 == "Yes" ~ "No",
      unadjusted_2 == "No" & stratified_2 == "No" & adjusted_2 == "Yes" ~ "No", 
      unadjusted_2 == "Yes" & stratified_2 == "Yes" & adjusted_2 == "Yes" ~ "invalid"),
    unadjusted_3 = case_when(
      unadjusted_3 == "Yes" & stratified_3 == "No" & adjusted_3 == "No" ~ "Yes", 
      unadjusted_3 == "Yes" & stratified_3 == "No" & adjusted_3 == "Yes" ~ "invalid",
      unadjusted_3 == "Yes" & stratified_3 == "Yes" & adjusted_3 == "Yes" ~ "invalid",
      unadjusted_3 == "Yes" & stratified_3 == "Yes" & adjusted_3 == "No" ~ "No",
      unadjusted_3 == "No" & stratified_3 == "No" & adjusted_3 == "No" ~ "invalid", 
      unadjusted_3 == "No" & stratified_3 == "Yes" & adjusted_3 == "No" ~ "No", 
      unadjusted_3 == "No" & stratified_3 == "Yes" & adjusted_3 == "Yes" ~ "No",
      unadjusted_3 == "No" & stratified_3 == "No" & adjusted_3 == "Yes" ~ "No", 
      unadjusted_3 == "Yes" & stratified_3 == "Yes" & adjusted_3 == "Yes" ~ "invalid"),
    unadjusted_4 = case_when(
      unadjusted_4 == "Yes" & stratified_4 == "No" & adjusted_4 == "No" ~ "Yes", 
      unadjusted_4 == "Yes" & stratified_4 == "No" & adjusted_4 == "Yes" ~ "invalid",
      unadjusted_4 == "Yes" & stratified_4 == "Yes" & adjusted_4 == "Yes" ~ "invalid",
      unadjusted_4 == "Yes" & stratified_4 == "Yes" & adjusted_4 == "No" ~ "No",
      unadjusted_4 == "No" & stratified_4 == "No" & adjusted_4 == "No" ~ "invalid", 
      unadjusted_4 == "No" & stratified_4 == "Yes" & adjusted_4 == "No" ~ "No", 
      unadjusted_4 == "No" & stratified_4 == "Yes" & adjusted_4 == "Yes" ~ "No",
      unadjusted_4 == "No" & stratified_4 == "No" & adjusted_4 == "Yes" ~ "No", 
      unadjusted_4 == "Yes" & stratified_4 == "Yes" & adjusted_4 == "Yes" ~ "invalid"),
    unadjusted_5 = case_when(
      unadjusted_5 == "Yes" & stratified_5 == "No" & adjusted_5 == "No" ~ "Yes", 
      unadjusted_5 == "Yes" & stratified_5 == "No" & adjusted_5 == "Yes" ~ "invalid",
      unadjusted_5 == "Yes" & stratified_5 == "Yes" & adjusted_5 == "Yes" ~ "invalid",
      unadjusted_5 == "Yes" & stratified_5 == "Yes" & adjusted_5 == "No" ~ "No",
      unadjusted_5 == "No" & stratified_5 == "No" & adjusted_5 == "No" ~ "invalid", 
      unadjusted_5 == "No" & stratified_5 == "Yes" & adjusted_5 == "No" ~ "No", 
      unadjusted_5 == "No" & stratified_5 == "Yes" & adjusted_5 == "Yes" ~ "No",
      unadjusted_5 == "No" & stratified_5 == "No" & adjusted_5 == "Yes" ~ "No", 
      unadjusted_5 == "Yes" & stratified_5 == "Yes" & adjusted_5 == "Yes" ~ "invalid")
    ) |> 
  
  # create variable for studies with a stratified spbg
  mutate(
    spbg_stratified = case_when(
      spbg_present == "Yes" & c(stratified_1 == "Yes" | stratified_2 == "Yes" | stratified_3 == "Yes" | stratified_4 == "Yes" | stratified_5 == "Yes") ~ "Yes",
      spbg_present == "No" ~ NA, 
      spbg_count == 1 & stratified_1 == "No" ~ "No",
      spbg_count == 2 & c(stratified_1 == "No" & stratified_2 == "No") ~ "No", 
      spbg_count == 3 & c(stratified_1 == "No" & stratified_2 == "No" & stratified_3 == "No") ~ "No",
      spbg_count == 4 & c(stratified_1 == "No" & stratified_2 == "No" & stratified_3 == "No" & stratified_4 == "No") ~ "No",
      spbg_count == 5 & c(stratified_1 == "No" & stratified_2 == "No" & stratified_3 == "No" & stratified_4 == "No" & stratified_5 == "No") ~ "No")
    ) |> 
  
# create variable for records which contain an model-adjusted spbg
  mutate(
    contains_adj_spbg = case_when(
      spbg_present == "Yes" & c(adjusted_1 == "Yes" | adjusted_2 == "Yes" | adjusted_3 == "Yes" | adjusted_4 == "Yes" | adjusted_5 == "Yes") ~ "Yes", 
      spbg_present == "No" ~ NA, 
      spbg_count == 1 & adjusted_1 == "No" ~ "No",
      spbg_count == 2 & c(adjusted_1 == "No" & adjusted_2 == "No") ~ "No", 
      spbg_count == 3 & c(adjusted_1 == "No" & adjusted_2 == "No" & adjusted_3 == "No") ~ "No",
      spbg_count == 4 & c(adjusted_1 == "No" & adjusted_2 == "No" & adjusted_3 == "No" & adjusted_4 == "No") ~ "No",
      spbg_count == 5 & c(adjusted_1 == "No" & adjusted_2 == "No" & adjusted_3 == "No" & adjusted_4 == "No" & adjusted_5 == "No") ~ "No")
    ) |> 
  
# create variable for records which contain a strataified spbg
  mutate(
    contains_strat_spbg = case_when(
      spbg_present == "Yes" & c(stratified_1 == "Yes" | stratified_2 == "Yes" | stratified_3 == "Yes" | stratified_4 == "Yes" | stratified_5 == "Yes") ~ "Yes", 
      spbg_present == "No" ~ NA, 
      spbg_count == 1 & stratified_1 == "No" ~ "No",
      spbg_count == 2 & c(stratified_1 == "No" & stratified_2 == "No") ~ "No", 
      spbg_count == 3 & c(stratified_1 == "No" & stratified_2 == "No" & stratified_3 == "No") ~ "No",
      spbg_count == 4 & c(stratified_1 == "No" & stratified_2 == "No" & stratified_3 == "No" & stratified_4 == "No") ~ "No",
      spbg_count == 5 & c(stratified_1 == "No" & stratified_2 == "No" & stratified_3 == "No" & stratified_4 == "No" & stratified_5 == "No") ~ "No")
    ) |> 

# create variable for records which contain an unadjusted spbg
  mutate(
    contains_unadj_spbg = case_when(
      spbg_present == "Yes" & c(unadjusted_1 == "Yes" | unadjusted_2 == "Yes" | unadjusted_3 == "Yes" | unadjusted_4 == "Yes" | unadjusted_5 == "Yes") ~ "Yes", 
      spbg_present == "No" ~ NA, 
      spbg_count == 1 & unadjusted_1 == "No" ~ "No",
      spbg_count == 2 & c(unadjusted_1 == "No" & unadjusted_2 == "No") ~ "No", 
      spbg_count == 3 & c(unadjusted_1 == "No" & unadjusted_2 == "No" & unadjusted_3 == "No") ~ "No",
      spbg_count == 4 & c(unadjusted_1 == "No" & unadjusted_2 == "No" & unadjusted_3 == "No" & unadjusted_4 == "No") ~ "No",
      spbg_count == 5 & c(unadjusted_1 == "No" & unadjusted_2 == "No" & unadjusted_3 == "No" & unadjusted_4 == "No" & unadjusted_5 == "No") ~ "No")
    ) |> 

  
  # separate out neurological conditions by ;
  separate(neurological_condition, into = c("condition1", "condition2"),
             sep = ";",   
             fill = "right",   
             remove = TRUE) |> 
  
  # clean up names of neuropathologies
  mutate(condition1 = recode(condition1,
      "Stroke (all)" = "Stroke (all)", 
      "encephalitis" = "Encephalitis", 
      "GBS" = "Guillain-Barré", 
      "Huntington disease" = "Huntington’s disease", 
      "Huntington Disease" = "Huntington’s disease")
      ) |> 
  
  mutate(condition2 = if_else( 
         condition2 == "", NA_character_, condition2)
         )|> 
  
  # separate out functional outcomes by ;
  separate(functional_outcome, into = c("outcome1", "outcome2", "outcome3"),
             sep = ";",   
             fill = "right",   
             remove = FALSE) |> 
  
  # standardize formatting of functional outcomes
  mutate(
    outcome1 = recode(outcome1, 
                         '(KOSCHI) King’s Outcome Scale for Childhood Head Injury score' = 'KOSCHI', 
                         'Bayley Scales of Infant Development III' = 'Bayley III', 
                         'Pediatric Stroke Outcome Measure (PSOM) ' = 'PSOM', 
                         'Scales  for  Outcomes  in  PD  (SCOPA)' = "SCOPA", 
                         "Unified  Huntington  Disease  Rating  Scale" = "UHDRS", 
                         "UPDRS" = "UPDRS (composite)", 
                         "Total motor scale (TMS)" = "TMS",
                         "medical research council ( MRC) sum score" = "MRC sum score",
                         "GBS disability score" = "GBS disability scale", 
                         "GBS  disability  scale" = "GBS disability scale",
                         "Pediatric Stroke Outcome Measure (PSOM)" = "PSOM", 
                         "GOS" = "GOS (unextended)")
  )  |>     
  mutate(
    outcome2 = recode(outcome2, 
                      " Gross Motor Function Classification System (GMFCS)" = "GMFCS", 
                      "UPDRS-III" = "UPDRS-III", 
                      "MSSS" = "MSSS", 
                      "mRS" = "mRS", 
                      "NIHSS" = "NIHSS", 
                      " PSOM" = "PSOM", 
                      " total functional capacity (TFC)" = "TFC", 
                      " UPDRS-III" = "UPDRS-III", 
                      "Barthel Index" = "Barthel Index", 
                      "ICARS" = "ICARS", 
                      "mNIHSS" = "mNIHSS", 
                      " NIHSS" = " NIHSS", 
                      " Katz index" = "Katz index", 
                      " Rasch- Built  Overall Built Disability Score" = "Rasch-Built Overall Built Disability Score", 
                      " medical research council ( MRC) sum score" = "Medical Research Council (MRC) sum score", 
                      " GDS" = "GDS", 
                      "Multiple Sclerosis Severity Score (MSSS)" = "MSSS", 
                      " PCPC" = " PCPC", 
                      "Stroke Levity Scale" = "Stroke Levity Scale", 
                      " SCIM 3" = "SCIM 3"),
    outcome2 = if_else(
      outcome2 == "", NA_character_, outcome2)
    ) |> 
  
  mutate(
    outcome3 = recode(outcome3,
                      "INAS" = "INAS", 
                      "Stroke Impact Scale 16" = "Stroke Impact Scale 16",
                      "SIS-16" = "Stroke Impact Scale 16"), 
     outcome3 = if_else(
      outcome3 == "", NA_character_, outcome3)
    ) |> 
  
  # standardize formatting of roc/auc variable
  mutate(
    roc_present = str_replace_all(
      roc_present, ";", "")
  ) |> 
  
  mutate(
    roc_present = recode(
      roc_present,
      "AUC" = "auc", 
      "AUCROC" = "auc_roc", 
      "ROCAUC" = "auc_roc", 
      "Neither" = "neither")
    ) |> 
  
  separate(
    effect_estimate, 
    into = c("effectmeasure1", 
             "effectmeasure2", 
             "effectmeasure3"),
             sep = ";",   
             fill = "right",   
             remove = FALSE) |> 
  # standardize formatting of effect estimate variable
  mutate(
    effectmeasure1 = recode(
      effectmeasure1, 
      "partial correlation r" = "Partial correlation r", 
      "pearson correlation r" = "Pearson correlation r"), 
    
    effectmeasure2 = str_remove(effectmeasure2, "^ "), 
    effectmeasure2 = recode(
      effectmeasure2, 
      "risk ratio" = "Risk ratio", 
      "odds ratio" = "Odds ratio"), 
    effectmeasure2 = if_else(
      effectmeasure2 == "", NA_character_, effectmeasure2),
    
    effectmeasure3 = str_remove(effectmeasure3, "^ "), 
    effectmeasure3 = if_else(
      effectmeasure3 == "", NA_character_, effectmeasure3),
    effectmeasure3 = recode(
      effectmeasure3, 
      "mean difference" = "Mean difference") 
  ) |> 
  
  # create a binary variable for whether a row only contains a beta coefficient
    mutate(
    beta_only_bin = case_when(
      effect_estimate == "Beta coefficient(s) only" ~ "Yes", 
      effect_estimate == "Beta coefficient(s) only;" ~ "Yes",
      TRUE ~ "No")
  ) |> 
  
  # create a binary variable for whether an observation is in the primary sample or only overall sample
  mutate(
    refined_bin = case_when(
      roc_present == "neither" & covariate_intent == "Yes" & beta_only_bin == "No" ~ "refined",
      TRUE ~ "overall_only")
  ) |> 
  
  # recode "unadjusted" to exclude those graphs that are stratified
  mutate(
    unadjusted_1_recode = case_when(
      unadjusted_1 == "Yes" & stratified_1 == "No" & adjusted_1 == "No" ~ "Yes", 
      unadjusted_1 == "Yes" & stratified_1 == "No" & adjusted_1 == "Yes" ~ "invalid",
      unadjusted_1 == "Yes" & stratified_1 == "Yes" & adjusted_1 == "Yes" ~ "invalid",
      unadjusted_1 == "Yes" & stratified_1 == "Yes" & adjusted_1 == "No" ~ "No",
      unadjusted_1 == "No" & stratified_1 == "No" & adjusted_1 == "No" ~ "invalid", 
      unadjusted_1 == "No" & stratified_1 == "Yes" & adjusted_1 == "No" ~ "No", 
      unadjusted_1 == "No" & stratified_1 == "Yes" & adjusted_1 == "Yes" ~ "No",
      unadjusted_1 == "No" & stratified_1 == "No" & adjusted_1 == "Yes" ~ "No", 
      unadjusted_1 == "Yes" & stratified_1 == "Yes" & adjusted_1 == "Yes" ~ "invalid"), 
    unadjusted_2_recode = case_when(
      unadjusted_2 == "Yes" & stratified_2 == "No" & adjusted_2 == "No" ~ "Yes", 
      unadjusted_2 == "Yes" & stratified_2 == "No" & adjusted_2 == "Yes" ~ "invalid",
      unadjusted_2 == "Yes" & stratified_2 == "Yes" & adjusted_2 == "Yes" ~ "invalid",
      unadjusted_2 == "Yes" & stratified_2 == "Yes" & adjusted_2 == "No" ~ "No",
      unadjusted_2 == "No" & stratified_2 == "No" & adjusted_2 == "No" ~ "invalid", 
      unadjusted_2 == "No" & stratified_2 == "Yes" & adjusted_2 == "No" ~ "No", 
      unadjusted_2 == "No" & stratified_2 == "Yes" & adjusted_2 == "Yes" ~ "No",
      unadjusted_2 == "No" & stratified_2 == "No" & adjusted_2 == "Yes" ~ "No", 
      unadjusted_2 == "Yes" & stratified_2 == "Yes" & adjusted_2 == "Yes" ~ "invalid"),
    unadjusted_3_recode = case_when(
      unadjusted_3 == "Yes" & stratified_3 == "No" & adjusted_3 == "No" ~ "Yes", 
      unadjusted_3 == "Yes" & stratified_3 == "No" & adjusted_3 == "Yes" ~ "invalid",
      unadjusted_3 == "Yes" & stratified_3 == "Yes" & adjusted_3 == "Yes" ~ "invalid",
      unadjusted_3 == "Yes" & stratified_3 == "Yes" & adjusted_3 == "No" ~ "No",
      unadjusted_3 == "No" & stratified_3 == "No" & adjusted_3 == "No" ~ "invalid", 
      unadjusted_3 == "No" & stratified_3 == "Yes" & adjusted_3 == "No" ~ "No", 
      unadjusted_3 == "No" & stratified_3 == "Yes" & adjusted_3 == "Yes" ~ "No",
      unadjusted_3 == "No" & stratified_3 == "No" & adjusted_3 == "Yes" ~ "No", 
      unadjusted_3 == "Yes" & stratified_3 == "Yes" & adjusted_3 == "Yes" ~ "invalid"),
    unadjusted_4_recode = case_when(
      unadjusted_4 == "Yes" & stratified_4 == "No" & adjusted_4 == "No" ~ "Yes", 
      unadjusted_4 == "Yes" & stratified_4 == "No" & adjusted_4 == "Yes" ~ "invalid",
      unadjusted_4 == "Yes" & stratified_4 == "Yes" & adjusted_4 == "Yes" ~ "invalid",
      unadjusted_4 == "Yes" & stratified_4 == "Yes" & adjusted_4 == "No" ~ "No",
      unadjusted_4 == "No" & stratified_4 == "No" & adjusted_4 == "No" ~ "invalid", 
      unadjusted_4 == "No" & stratified_4 == "Yes" & adjusted_4 == "No" ~ "No", 
      unadjusted_4 == "No" & stratified_4 == "Yes" & adjusted_4 == "Yes" ~ "No",
      unadjusted_4 == "No" & stratified_4 == "No" & adjusted_4 == "Yes" ~ "No", 
      unadjusted_4 == "Yes" & stratified_4 == "Yes" & adjusted_4 == "Yes" ~ "invalid"),
    unadjusted_5_recode = case_when(
      unadjusted_5 == "Yes" & stratified_5 == "No" & adjusted_5 == "No" ~ "Yes", 
      unadjusted_5 == "Yes" & stratified_5 == "No" & adjusted_5 == "Yes" ~ "invalid",
      unadjusted_5 == "Yes" & stratified_5 == "Yes" & adjusted_5 == "Yes" ~ "invalid",
      unadjusted_5 == "Yes" & stratified_5 == "Yes" & adjusted_5 == "No" ~ "No",
      unadjusted_5 == "No" & stratified_5 == "No" & adjusted_5 == "No" ~ "invalid", 
      unadjusted_5 == "No" & stratified_5 == "Yes" & adjusted_5 == "No" ~ "No", 
      unadjusted_5 == "No" & stratified_5 == "Yes" & adjusted_5 == "Yes" ~ "No",
      unadjusted_5 == "No" & stratified_5 == "No" & adjusted_5 == "Yes" ~ "No", 
      unadjusted_5 == "Yes" & stratified_5 == "Yes" & adjusted_5 == "Yes" ~ "invalid")
  )

  
  



```



Lengthen dataset for dual-pathology populations
```{r}


x <- Abstraction_master |> 
  filter(spbg_present == "No") |> 
  filter(figure_other == "Yes") 


dat_analysis <- dat_incl |> 

  mutate(
    condition1 = recode(
      condition1,
      "Ischemic stroke" = "Stroke", 
      "Hemorrhagic stroke" = "Stroke", 
      "Stroke (all)" = "Stroke")) |> 
  
  # make the records with two populations into their own observation
  pivot_longer(
    names_to = "which_condition", 
    values_to = "neuropathology", 
    cols = condition1:condition2) |> 
  
filter(neuropathology != "") |> 
  select(!"which_condition") |> 
  
  # clean up names of neuropathologies
  mutate(neuropathology = recode(neuropathology,
      "Stroke (all)" = "Stroke (all)", 
      "encephalitis" = "Encephalitis", 
      "GBS" = "Guillain-Barré", 
      "Huntington disease" = "Huntington’s disease", 
      "Huntington Disease" = "Huntington’s disease")
      ) |>
  
  mutate(
    neuropathology = fct_other(neuropathology, keep = "Stroke", 
                                    other_level = "Other"), 
    neuropathology = fct_relevel(neuropathology, "Stroke", "Other")) 


# How many studies used Grotta bars?
grotta_present <- sum(dat_analysis$spbg_present == "Yes")
grotta_present
grotta_present/250

# How many studies did not use Grotta bars?
grotta_not_present <- sum(dat_analysis$spbg_present == "No")
grotta_not_present
grotta_not_present/250

# Of these, how many used a different type of figure to report functional outcomes?
other_figure_used <- sum(dat_analysis$spbg_present == "No" & dat_analysis$figure_other == "Yes")
other_figure_used # 157
other_figure_used/157

# Of these, how many used no figure to report functional outcomes?
no_figure_used <- sum(dat_analysis$spbg_present == "No" & dat_analysis$figure_other == "No")
no_figure_used
no_figure_used/157
```


Table 1: Stroke population
```{r}

dat_analysis_stroke <- dat_analysis |> 
  filter(neuropathology == "Stroke")

unadj_strat_adj <- sum(dat_analysis_stroke$contains_unadj_spbg == "Yes" & dat_analysis_stroke$contains_strat_spbg == "Yes" & dat_analysis_stroke$contains_adj_spbg == "Yes", 
    na.rm = TRUE)
unadj_strat_adj

strat_adj <- sum(dat_analysis_stroke$contains_unadj_spbg == "No" & dat_analysis_stroke$contains_strat_spbg == "Yes" & dat_analysis_stroke$contains_adj_spbg == "Yes", 
    na.rm = TRUE)
strat_adj
  
unadj_adj <- sum(dat_analysis_stroke$contains_unadj_spbg == "Yes" & dat_analysis_stroke$contains_strat_spbg == "No" & dat_analysis_stroke$contains_adj_spbg == "Yes", 
    na.rm = TRUE)
unadj_adj
  
adj <- sum(dat_analysis_stroke$contains_unadj_spbg == "No" & dat_analysis_stroke$contains_strat_spbg == "No" & dat_analysis_stroke$contains_adj_spbg == "Yes", 
    na.rm = TRUE)
adj
  
unadj_strat <-sum(dat_analysis_stroke$contains_unadj_spbg == "Yes" & dat_analysis_stroke$contains_strat_spbg == "Yes" & dat_analysis_stroke$contains_adj_spbg == "No", 
    na.rm = TRUE)
unadj_strat
  
strat <- sum(dat_analysis_stroke$contains_unadj_spbg == "No" & dat_analysis_stroke$contains_strat_spbg == "Yes" & dat_analysis_stroke$contains_adj_spbg == "No", 
    na.rm = TRUE)
strat
  
unadj <- sum(dat_analysis_stroke$contains_unadj_spbg == "Yes" & dat_analysis_stroke$contains_strat_spbg == "No" & dat_analysis_stroke$contains_adj_spbg == "No", 
    na.rm = TRUE)
unadj
  
no_spbg <- sum(dat_analysis_stroke$spbg_present == "No")
no_spbg
```


Table 1: Other populations
```{r}

dat_analysis_other <- dat_analysis |> 
  filter(neuropathology == "Other")

unadj_strat_adj <- sum(dat_analysis_other$contains_unadj_spbg == "Yes" & dat_analysis_other$contains_strat_spbg == "Yes" & dat_analysis_other$contains_adj_spbg == "Yes", 
    na.rm = TRUE)
unadj_strat_adj

strat_adj <- sum(dat_analysis_other$contains_unadj_spbg == "No" & dat_analysis_other$contains_strat_spbg == "Yes" & dat_analysis_other$contains_adj_spbg == "Yes", 
    na.rm = TRUE)
strat_adj
  
unadj_adj <- sum(dat_analysis_other$contains_unadj_spbg == "Yes" & dat_analysis_other$contains_strat_spbg == "No" & dat_analysis_other$contains_adj_spbg == "Yes", 
    na.rm = TRUE)
unadj_adj
  
adj <- sum(dat_analysis_other$contains_unadj_spbg == "No" & dat_analysis_other$contains_strat_spbg == "No" & dat_analysis_other$contains_adj_spbg == "Yes", 
    na.rm = TRUE)
adj
  
unadj_strat <-sum(dat_analysis_other$contains_unadj_spbg == "Yes" & dat_analysis_other$contains_strat_spbg == "Yes" & dat_analysis_other$contains_adj_spbg == "No", 
    na.rm = TRUE)
unadj_strat
  
strat <- sum(dat_analysis_other$contains_unadj_spbg == "No" & dat_analysis_other$contains_strat_spbg == "Yes" & dat_analysis_other$contains_adj_spbg == "No", 
    na.rm = TRUE)
strat
  
unadj <- sum(dat_analysis_other$contains_unadj_spbg == "Yes" & dat_analysis_other$contains_strat_spbg == "No" & dat_analysis_other$contains_adj_spbg == "No", 
    na.rm = TRUE)
unadj
  
no_spbg <- sum(dat_analysis_other$spbg_present == "No")
no_spbg
```

